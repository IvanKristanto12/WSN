package UserApp;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.Date;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

/**
 * 
 * @author Ifunk
 *
 */
public class Visualizing extends JPanel {

	public static volatile boolean canPlot;
	public boolean showed;

	public final Plotting plotMaker = new Plotting();
	public JFrame frame;
	public JFreeChart chart;
	public XYPlot plot;
	public String sensorId;

	/** Time series for total memory used. */
	private TimeSeries amplitude;

	/** Time series for free memory. */
	private TimeSeries frequency;

	/**
	 * Creates a new application.
	 *
	 * @param maxAge the maximum age (in milliseconds).
	 */
	public Visualizing(String sensorId) {
		super(new BorderLayout());
		this.sensorId = sensorId;
		showed = false;
		// create two series that automatically discard data more than 30
		// seconds old...
		this.amplitude = new TimeSeries("Amplitude");
		this.amplitude.setMaximumItemAge(10000);
		this.frequency = new TimeSeries("Frequency");
		this.frequency.setMaximumItemAge(10000);

		TimeSeriesCollection dataset = new TimeSeriesCollection();
		dataset.addSeries(this.amplitude);
		dataset.addSeries(this.frequency);

		DateAxis domain = new DateAxis("Time");
		NumberAxis range = new NumberAxis("Sense Result");
		domain.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 12));
		range.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 12));
		domain.setLabelFont(new Font("SansSerif", Font.PLAIN, 14));
		range.setLabelFont(new Font("SansSerif", Font.PLAIN, 14));

		XYItemRenderer renderer = new XYLineAndShapeRenderer(true, true);
		renderer.setSeriesPaint(0, Color.RED);
		renderer.setSeriesPaint(1, Color.GREEN);

		renderer.setSeriesStroke(0, new BasicStroke(3f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));
		renderer.setSeriesStroke(1, new BasicStroke(3f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));
		plot = new XYPlot(dataset, domain, range, renderer);
		domain.setAutoRange(true);
//		domain.setAutoRangeMinimumSize(63);
		domain.setLowerMargin(0.0);
		domain.setUpperMargin(0.0);
		domain.setTickLabelsVisible(true);

		range.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

		chart = new JFreeChart("Visualizing " + sensorId, new Font("SansSerif", Font.BOLD, 24), plot, true);

		ChartUtilities.applyCurrentTheme(chart);

		ChartPanel chartPanel = new ChartPanel(chart, true);
		chartPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4),
				BorderFactory.createLineBorder(Color.black)));
		add(chartPanel);

	}

	/**
	 * Adds an observation to the 'total memory' time series.
	 *
	 * @param y the total memory used.
	 */
	private void addAmplitudeObservation(long milis, double y) {
		this.amplitude.addOrUpdate(new Millisecond(new Date(milis)), y);
	}

	/**
	 * Adds an observation to the 'free memory' time series.
	 *
	 * @param y the free memory.
	 */
	private void addFreqObservation(long milis, double y) {
		this.frequency.addOrUpdate(new Millisecond(new Date(milis)), y);
		
	}

	/**
	 * The data generator.
	 */
	class DataGenerator extends Timer implements ActionListener {
		/**
		 * Constructor.
		 *
		 * @param interval the interval (in milliseconds)
		 */
		DataGenerator(int interval) {
			super(interval, null);
			addActionListener(this);
		}

		private Long lastTime = new Long(0);

		/**
		 * 
		 */
		public void actionPerformed(ActionEvent event) {
			while (canPlot) {
				canPlot = false;
				try {
					plotMaker.plotRealTime(sensorId);
					if (plotMaker.makePlot) {
						addAmplitudeObservation(Long.parseLong(plotMaker.plotTime), plotMaker.plotAmplitude);
						if (plotMaker.plotIdx == plotMaker.plotFreqIdx) {
							addFreqObservation(Long.parseLong(plotMaker.plotTime), plotMaker.plotFreq);
						}
						lastTime = Long.parseLong(plotMaker.plotTime);
					}

				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}
	}

	/**
	 * 
	 */
	public void showPlot() {
		if (!showed) {
			this.showed = true;
			frame = new JFrame("Visualizing " + sensorId);
			Visualizing panel = this;
			frame.getContentPane().add(panel, BorderLayout.CENTER);
			frame.setBounds(200, 120, 700, 300);
			frame.setVisible(true);

			panel.new DataGenerator(0).start();
			frame.addWindowListener(new WindowAdapter() {
				public void windowClosing(WindowEvent e) {
					System.out.println(sensorId + " Monitor exit..");
				}
			});

		}
	}
}
