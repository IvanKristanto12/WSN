package UserApp;

import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DefaultLogger;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.ProjectHelper;

import com.virtenio.commander.io.DataConnection;
import com.virtenio.commander.toolsets.preon32.Preon32Helper;

/**
 * 
 * @author Ivan Kristanto <ivankristanto12@gmail.com>
 *
 */
public class Tester {

	private static Thread senseThread;
	private static BufferedInputStream in;
	private static DataConnection conn;
	private static volatile boolean isSensing;
	private static int totalSensor;
	private static volatile int counter;
	private static boolean stopping;

	private static Visualizing[] v;

	public static void main(String[] args) throws Exception {
		// init BaseStation
		Tester tester = new Tester();
		tester.context_set("context.set.1");
		tester.time_synchronize();

		Preon32Helper nodeHelper = new Preon32Helper("COM3", 115200);
		conn = nodeHelper.runModule("basestation");
		in = new BufferedInputStream(conn.getInputStream());
		conn.flush();

		System.out.println("\n\n");
		
		// Input
		Scanner sc = new Scanner(System.in);
		System.out.println("Please insert total Sensor Node (not including basestation) : ");
		totalSensor = sc.nextInt();
		counter = totalSensor;
		
		v = new Visualizing[totalSensor];
		for (int i = 0; i < totalSensor; i++) {
			v[i] = new Visualizing("Sensor" + (i + 1));
		}

		while (true) {
			System.out.println(
					"OPTION \n 1 : Check Online Node \n 2 : Sense \n 3 : Stop Sensing \n 4 : Exit \n Enter option number : ");
			int input = sc.nextInt();
			if (isSensing) {
				if (input == 1 || input == 2 || input == 4) {
					System.out.println("IN SENSING STATE.. TO STOP USE OPTION '3' ");
					input = 0;
				} else {
					conn.write(input);
				}
			} else {
				conn.write(input);
			}
			byte[] buffer = new byte[1024];
			if (input == 1) {
				System.out.println("ONLINE NODE :");
				Thread.sleep(1000);
				while (in.available() > 0) {
					in.read(buffer);
					conn.flush();
					String s = new String(buffer);
					String[] res = s.split("_");
					for (int i = 0; i < res.length; i++) {
						if (res[i].length() != 0) {
							if (res[i].charAt(0) != '@') {
								String[] temp = res[i].split("#");
								if(temp.length >1)
								System.out.println(
										"> " + temp[0] + "Time: " + formatTimetoString(Long.parseLong(temp[1])));
							}
						}
					}
				}
				System.out.println(" - CHECKING DONE - \n");
			} else if (input == 2) {
				System.out.println("SENSING..");

				isSensing = true;
				for (int i = 0; i < totalSensor; i++) {
					v[i].showed = false;
					v[i].showPlot();
				}
				if (senseThread == null) {
					senseThread = new Thread() {
						public void run() {
							while (true && isSensing) {
								byte[] buffer = new byte[1024];
								try {
									if (in.available() > 0) {
										in.read(buffer);
										conn.flush();
										String s = new String(buffer);
										if (s.trim().equalsIgnoreCase("done")) {
											counter--;
											if (counter == 0 && stopping == false) {
												counter = totalSensor;
											}
											System.out.println("Data saved..");
											for (int j = 0; j < totalSensor; j++) {
												v[j].canPlot = true;
											}

										} else {
											String[] res = s.split("_");
											for (int i = 0; i < res.length; i++) {
												if (res[i].trim().length() != 0) {
													if (res[i].charAt(0) != '@') {
														String[] str = res[i].split(" ");
														String save = str[1] + " " + str[2] + " "
																+ formatTimetoString(Long.parseLong(str[3])) + " "
																+ str[4] + " " + str[5] + " " + str[7];
														saveSenseResult(str[0], save);

														// plotting
														save = res[i].substring(str[0].length());
														saveTempSenseResult(str[0], save);
														for (int j = 0; j < totalSensor; j++) {
															if (v[j].sensorId.equalsIgnoreCase(str[0])) {
																v[j].canPlot = true;

															}
														}
													}
												}
											}

										}
									}
								} catch (NumberFormatException e) {
									// TODO Auto-generated catch block
//									e.printStackTrace();
								} catch (IOException e) {
									// TODO Auto-generated catch block
//									e.printStackTrace();
								}
							}
						}
					};
					senseThread.start();
				}

				// Stop Sensing
			} else if (input == 3) {
				if (isSensing) {
					System.out.println("STOP SENSING.. WAIT FOR ALL SENSOR STOP SENSING..");

					Thread stopThread = new Thread() {
						public void run() {
							while (counter != 0) {
								stopping = true;
							}
							isSensing = false;
							stopping = false;
							counter = totalSensor;
							for (int i = 0; i < totalSensor; i++) {
								v[i].frame.dispatchEvent(new WindowEvent(v[i].frame, WindowEvent.WINDOW_CLOSING));
								v[i].plotMaker.fileHelper.delete();
							}
							System.out.println(" - STOP SENSING DONE - \n");
						}
					};
					stopThread.start();
					while (stopThread.isAlive()) {
						System.out.println(counter + " Sensor remaining..");
						Thread.sleep(1000);
					}
				}else {
					System.out.println("NOT IN SENSING STATE..");
				}

			} else if (input == 4) {
				System.out.println("TERMINATING PROGRAM..");
				isSensing = false;
				Thread.sleep(1000);
				System.out.println(" - PROGRAM TERMINATED - ");
				System.exit(0);
			}

		}

	}

	// console build ant
	private static DefaultLogger getConsoleLogger() {
		DefaultLogger consoleLogger = new DefaultLogger();
		consoleLogger.setErrorPrintStream(System.err);
		consoleLogger.setOutputPrintStream(System.out);
		consoleLogger.setMessageOutputLevel(Project.MSG_INFO);
		return consoleLogger;
	}

	// ant build time synchronize
	private void time_synchronize() throws Exception {
		DefaultLogger consoleLogger = getConsoleLogger();
		File buildFile = new File(
				"C:\\Users\\Ifunk\\Desktop\\Skripsi\\Program Skripsi\\Sandbox\\build.xml");
		Project antProject = new Project();
		antProject.setUserProperty("ant.file", buildFile.getAbsolutePath());
		antProject.addBuildListener(consoleLogger);
		try {
			antProject.fireBuildStarted();
			antProject.init();
			ProjectHelper helper = ProjectHelper.getProjectHelper();
			antProject.addReference("ant.ProjectHelper", helper);
			helper.parse(antProject, buildFile);
			String target = "cmd.time.synchronize";
			antProject.executeTarget(target);
			antProject.fireBuildFinished(null);
		} catch (BuildException e) {
//			e.printStackTrace();
		}
	}

	// set context basestation
	private void context_set(String target) throws Exception {
		DefaultLogger consoleLogger = getConsoleLogger();
		File buildFile = new File(
				"C:\\Users\\Ifunk\\Desktop\\MATKUL SEMS 7\\Skripsi\\Program Skripsi\\Sandbox\\buildUser.xml");
		Project antProject = new Project();
		antProject.setUserProperty("ant.file", buildFile.getAbsolutePath());
		antProject.addBuildListener(consoleLogger);
		try {
			antProject.fireBuildStarted();
			antProject.init();
			ProjectHelper helper = ProjectHelper.getProjectHelper();
			antProject.addReference("ant.ProjectHelper", helper);
			helper.parse(antProject, buildFile);
			antProject.executeTarget(target);
			antProject.fireBuildFinished(null);
		} catch (BuildException e) {
//			e.printStackTrace();
		}
	}

	// save data
	private static void saveSenseResult(String sensorName, String msg) {
		File resFolder = new File("SenseResult");
		if (!resFolder.exists()) {
			resFolder.mkdir();
		}
		for (int i = 0; i < totalSensor; i++) {
			v[i].plotMaker.senseResultDefaultPath = resFolder.getAbsolutePath();
		}

		Date date = new Date(System.currentTimeMillis());
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy_HH:mm:ss.SSS");
		String path = resFolder.getAbsolutePath() + "\\" + sensorName + "-"
				+ new SimpleDateFormat("ddMMyyyy").format(date) + ".txt";
		try {
			FileWriter fileWriter = new FileWriter(path, true);
			BufferedWriter buffWriter = new BufferedWriter(fileWriter);
			File dataFile = new File(path);
			if (!dataFile.exists()) {
				buffWriter.append(sensorName + " Sense Result \n [re im time amplitude dominantFreqIdx dominantFreq] ");
			}
//			buffWriter.append("Time data saved: "+simpleDateFormat.format(date) +"\n");
			buffWriter.append(msg + "\n");
			buffWriter.close();
			fileWriter.close();
		} catch (Exception e) {
//			e.printStackTrace();
		}
	}

	private static void saveTempSenseResult(String sensorName, String msg) {
		File resFolder = new File("SenseResult");
		String path = resFolder.getAbsolutePath() + "\\" + sensorName + ".txt";

		try {
			FileWriter fileWriter = new FileWriter(path, false);
			BufferedWriter buffWriter = new BufferedWriter(fileWriter);
			buffWriter.write(msg + "\n");
			buffWriter.close();
			fileWriter.close();
		} catch (Exception e) {
//			e.printStackTrace();
		}
	}

	private static String formatTimetoString(long timeInMillis) {
		Date date = new Date(timeInMillis);
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("HH:mm:ss.SSS");
		return simpleDateFormat.format(date);
	}

}
